{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"numpy.sum","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyONp1KnU/2y4DwBKNx6UEfu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### numpy의 중요성\n","- numpy는 수많은 언어들 중, 계산에 최적화된 라이브러리이다.\n","- 수많은 언어들 중, pytorch, tensorflow 등의 라이브러리가 파이썬 상에 구현되는 이유 중 하나는 numpy이다.\n","- tensorflow, pytorch는 numpy에 dataflow graph,AutoDiff 의 기능을 추가한 것이라 생각할 수 있다.\n","- tensorflow, pytorch에서 tensor을 다룰 때 사용되는 여러 함수들이 numpy에서 비슷하게 구현되어 있다.\n"],"metadata":{"id":"oW1i-FZOtfPv"}},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"J4GxcuCvvGg9","executionInfo":{"status":"ok","timestamp":1658239132349,"user_tz":-540,"elapsed":311,"user":{"displayName":"Gangmin Kwon","userId":"10275071407659361966"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["## numpy.sum\n","https://numpy.org/doc/stable/reference/generated/numpy.sum.html\n","\n","numpy.sum(a, axis=None, dtype=None, out=None, keepdims=\\<no value>, initial=\\<no value>, where=\\<no value>)\n","- a : array_like. element list\n","- axis : None, int, tuple(of ints), optional\n","- dtype : dtype, optional\n","- out : ndarray, optional\n","- keepdims : bool, optional\n","- initial : scalar, optional\n","- where : array-like of bool, optional\n","    elements to include in the sum\n","\n","return : sum_along_axis : ndarray"],"metadata":{"id":"6GLBclYevBy4"}},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5EgLwlT6tc1l","executionInfo":{"status":"ok","timestamp":1658239240504,"user_tz":-540,"elapsed":330,"user":{"displayName":"Gangmin Kwon","userId":"10275071407659361966"}},"outputId":"8bac355b-295c-4063-994f-600900ad9113"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[[ 0  1  2  3  4]\n","  [ 5  6  7  8  9]\n","  [10 11 12 13 14]\n","  [15 16 17 18 19]]\n","\n"," [[20 21 22 23 24]\n","  [25 26 27 28 29]\n","  [30 31 32 33 34]\n","  [35 36 37 38 39]]\n","\n"," [[40 41 42 43 44]\n","  [45 46 47 48 49]\n","  [50 51 52 53 54]\n","  [55 56 57 58 59]]]\n","general sum : 1770\n"]}],"source":["a = np.array(list(range(60)))\n","a = a.reshape((3,4,5))\n","print(a)\n","print(f\"general sum : {np.sum(a)}\")"]},{"cell_type":"markdown","source":["### parameter - axis\n","- selected axis would be summed\n","- you can select multi-layer"],"metadata":{"id":"H0E2Ej7ZyZH5"}},{"cell_type":"code","source":["#sum with axis\n","#function sum that which axis you select\n","print(a.shape)\n","a_0 = np.sum(a, axis = 0)\n","a_1 = np.sum(a, axis = 1)\n","a_2 = np.sum(a, axis = 2)\n","\n","print(f\"with axis = 0 : \\shape = {a_0.shape} \\n {a_0}\")\n","print(f\"with axis = 1 : \\shape = {a_1.shape} \\n{a_1}\")\n","print(f\"with axis = 2 : \\shape = {a_2.shape} \\n{a_2}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JxVi--nxwQbV","executionInfo":{"status":"ok","timestamp":1658239661756,"user_tz":-540,"elapsed":420,"user":{"displayName":"Gangmin Kwon","userId":"10275071407659361966"}},"outputId":"32109cc1-3eae-4f68-9e55-0178388944a7"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["(3, 4, 5)\n","with axis = 0 : \\shape = (4, 5) \n"," [[ 60  63  66  69  72]\n"," [ 75  78  81  84  87]\n"," [ 90  93  96  99 102]\n"," [105 108 111 114 117]]\n","with axis = 1 : \\shape = (3, 5) \n","[[ 30  34  38  42  46]\n"," [110 114 118 122 126]\n"," [190 194 198 202 206]]\n","with axis = 2 : \\shape = (3, 4) \n","[[ 10  35  60  85]\n"," [110 135 160 185]\n"," [210 235 260 285]]\n"]}]},{"cell_type":"code","source":["#sum with axis - multi selection\n","print(a.shape)\n","a_01 = np.sum(a, axis = (0,1))\n","a_02 = np.sum(a, axis = (0,2))\n","a_12 = np.sum(a, axis = (1,2))\n","a_012 = np.sum(a, axis = (0,1,2))\n","\n","print(f\"with axis = 0, 1 : \\shape = {a_01.shape} \\n {a_01}\")\n","print(f\"with axis = 0, 2 : \\shape = {a_02.shape} \\n {a_02}\")\n","print(f\"with axis = 1, 2 : \\shape = {a_12.shape} \\n {a_12}\")\n","print(f\"with axis = 0, 1, 2 : \\shape = {a_012.shape} \\n {a_012}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EyJyA8yVw9Zs","executionInfo":{"status":"ok","timestamp":1658239663177,"user_tz":-540,"elapsed":3,"user":{"displayName":"Gangmin Kwon","userId":"10275071407659361966"}},"outputId":"3cc17e6b-83ab-4f54-9669-580655aae667"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["(3, 4, 5)\n","with axis = 0, 1 : \\shape = (5,) \n"," [330 342 354 366 378]\n","with axis = 0, 2 : \\shape = (4,) \n"," [330 405 480 555]\n","with axis = 1, 2 : \\shape = (3,) \n"," [190 590 990]\n","with axis = 0, 1, 2 : \\shape = () \n"," 1770\n"]}]},{"cell_type":"markdown","source":["### parameter - dtype\n","- change the return dtype\n","- downcast would damage to the data"],"metadata":{"id":"J5yR6vhYyfvB"}},{"cell_type":"code","source":["print(a.dtype)\n","print(np.sum(a).dtype)\n","print(np.sum(a, dtype = 'float32').dtype)\n","print(np.sum(a, dtype = 'float64').dtype)\n","b = np.array([2 ** 30])\n","print(b)\n","print(np.sum(b, dtype = 'int16'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"waSOD-8syFcw","executionInfo":{"status":"ok","timestamp":1658239912534,"user_tz":-540,"elapsed":312,"user":{"displayName":"Gangmin Kwon","userId":"10275071407659361966"}},"outputId":"8cc11cf0-b7b5-4f8f-9e70-5a09c33cc397"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["int64\n","int64\n","float32\n","float64\n","[1073741824]\n","0\n"]}]},{"cell_type":"markdown","source":["### parameter - out\n","- save data to this variable without using other insertion\n","- out에 지정된 variable에 sum 결과 저장."],"metadata":{"id":"IphdfaBgzWhO"}},{"cell_type":"code","source":["save = np.array([1,2,3])\n","x = np.sum(a, axis = (1,2), out = save)\n","print(x)\n","print(save)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uEXku4royjV8","executionInfo":{"status":"ok","timestamp":1658240472820,"user_tz":-540,"elapsed":2,"user":{"displayName":"Gangmin Kwon","userId":"10275071407659361966"}},"outputId":"3d623975-8acd-4862-c508-d6c33b91f9fd"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["[190 590 990]\n","[190 590 990]\n"]}]},{"cell_type":"markdown","source":["### parameter - keepdims\n","- if keep dims is true, the dimension would be keep\n","- with sum axis = 1 with array shape (3,4,5)\n","\n","   keepdims = False -> (3,5)\n","\n","   keepdims = True -> (3,1,5) "],"metadata":{"id":"iFC6T0Kc1qrc"}},{"cell_type":"code","source":["print(np.sum(a, axis =1).shape)\n","print(np.sum(a,axis =1, keepdims = True).shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xt_W6JWszv3g","executionInfo":{"status":"ok","timestamp":1658240807161,"user_tz":-540,"elapsed":2,"user":{"displayName":"Gangmin Kwon","userId":"10275071407659361966"}},"outputId":"a8ed452c-b920-4705-87fe-7ad3466d3ecc"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["(3, 5)\n","(3, 1, 5)\n"]}]},{"cell_type":"markdown","source":["### parameter - initial\n","- add bias\n","- same with sum(a, .., initial = b) = sum(a, ... , initial = 0) + b"],"metadata":{"id":"eSwbxqmo2vV8"}},{"cell_type":"code","source":["print(np.sum(a, axis = (0,1)))\n","print(np.sum(a, axis = (0,1) , initial = 10))\n","print(np.sum(a, axis = (0,1)) + 10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f9l3TF3Y19QT","executionInfo":{"status":"ok","timestamp":1658240938898,"user_tz":-540,"elapsed":4,"user":{"displayName":"Gangmin Kwon","userId":"10275071407659361966"}},"outputId":"9d776a5a-615a-4240-d614-7c8acf6462c7"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["[330 342 354 366 378]\n","[340 352 364 376 388]\n","[340 352 364 376 388]\n"]}]},{"cell_type":"markdown","source":["### parameter - where\n","- False인 항목은 sum할 항에서 제외\n","- 가장 하위 차원에서부터 할당된다."],"metadata":{"id":"IKB2cR_13QeK"}},{"cell_type":"code","source":["x = np.sum(a, where = [True, False, True, False, True])\n","print(x)\n","x = np.sum(a, where = [[True, True, True, False, True], [True, True, True, False, True], [True, False, True, False, True], [True, False, True, False, True]])\n","print(x)\n","\n","x = np.sum(a, axis = 1, where = [True, False, True, False, True])\n","print(x)\n","\n","np.sum([[0, 1], [np.nan, 5]], where=[False, True], axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FN88roQ83K_c","executionInfo":{"status":"ok","timestamp":1658241314730,"user_tz":-540,"elapsed":4,"user":{"displayName":"Gangmin Kwon","userId":"10275071407659361966"}},"outputId":"c3aa8be1-6a84-4744-85df-24ab88fabc76"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["1062\n","1203\n","[[ 30   0  38   0  46]\n"," [110   0 118   0 126]\n"," [190   0 198   0 206]]\n"]},{"output_type":"execute_result","data":{"text/plain":["array([1., 5.])"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":[""],"metadata":{"id":"1i0kvlwQ4E4H"},"execution_count":null,"outputs":[]}]}